// Generated by CoffeeScript 1.6.2
(function() {
  var AppLoader, Application, Version, fs, path, sift, _;

  path = require("path");

  _ = require("underscore");

  sift = require("sift");

  fs = require("fs");

  Application = require("./application");

  Version = require("./version");

  AppLoader = (function() {
    /*
    */
    function AppLoader(options) {
      var _ref;

      this.options = options;
      this.name = options.name;
      this.processNames = ((_ref = options.process) != null ? _ref.names : void 0) || [];
      this._settingPaths = options.settings || {};
      this._setupDirs();
      this._setupVersionSettings();
      this._setupVersionOptions();
    }

    /*
    */


    AppLoader.prototype.load = function(callback) {
      var fileName, fileParts, options, version, versions, _i, _len, _ref;

      versions = [];
      _ref = fs.readdirSync(this.directories.versions);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        fileName = _ref[_i];
        if (fileName === ".DS_Store") {
          continue;
        }
        fileParts = fileName.split(".");
        fileParts.pop();
        version = fileParts.join(".");
        options = _.extend({
          number: version,
          settings: this._settingPaths,
          settingsDirectory: this._versionSettingPaths[version],
          path: path.join(this.directories.versions, fileName)
        }, this._versionOptions(version));
        versions.push(new Version(options));
      }
      return callback(null, new Application(this, this.name, versions));
    };

    /*
    */


    AppLoader.prototype._setupDirs = function() {
      var dirName, dirs;

      dirs = {};
      _.defaults(dirs, this.options.directories || {}, {
        versions: "versions",
        settings: "settings"
      });
      for (dirName in dirs) {
        dirs[dirName] = path.join(this.options.directory, dirName);
      }
      return this.directories = dirs;
    };

    /*
    */


    AppLoader.prototype._setupVersionSettings = function() {
      var e, name, settingPaths, version, versions, _i, _j, _len, _len1, _ref;

      settingPaths = {};
      try {
        _ref = fs.readdirSync(this.directories.settings);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          name = _ref[_i];
          versions = name.split(" ");
          for (_j = 0, _len1 = versions.length; _j < _len1; _j++) {
            version = versions[_j];
            settingPaths[version] = path.join(this.directories.settings, name);
          }
        }
      } catch (_error) {
        e = _error;
      }
      return this._versionSettingPaths = settingPaths;
    };

    /*
    */


    AppLoader.prototype._setupVersionOptions = function() {
      var appOptions, options, _i, _len, _ref;

      appOptions = [];
      _ref = this.options.versions;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        options = _ref[_i];
        appOptions.push({
          test: sift(options.test),
          set: options.set
        });
      }
      return this.versionOptions = appOptions;
    };

    /*
    */


    AppLoader.prototype._versionOptions = function(version) {
      var options, _i, _len, _ref;

      _ref = this.versionOptions;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        options = _ref[_i];
        if (options.test({
          version: version
        })) {
          return options.set;
        }
      }
      return {};
    };

    return AppLoader;

  })();

  module.exports = AppLoader;

}).call(this);
