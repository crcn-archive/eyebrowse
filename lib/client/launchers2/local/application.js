// Generated by CoffeeScript 1.6.2
(function() {
  var Application, async, comerr, cstep, dirmr, events, exec, fs, outcome, platform, rmdir, sift, stepc, utils,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  events = require("events");

  utils = require("../../utils");

  exec = require("child_process").exec;

  cstep = require("cstep");

  platform = require("os").platform;

  outcome = require("outcome");

  sift = require("sift");

  comerr = require("comerr");

  stepc = require("stepc");

  dirmr = require("dirmr");

  rmdir = require("rmdir");

  async = require("async");

  fs = require("fs");

  Application = (function(_super) {
    __extends(Application, _super);

    /*
    */


    function Application(loader, name, versions) {
      this.name = name;
      this.versions = versions;
      this._onExit = __bind(this._onExit, this);
      this.processNames = loader.processNames;
    }

    /*
    */


    Application.prototype.start = function(options, callback) {
      var o, self;

      o = outcome.e(callback);
      self = this;
      return stepc.async((function() {
        return self.killAll(this);
      }), o.s(function() {
        return self.findVersion(options.version, this);
      }), o.s(function(version) {
        self.currentVersion = version;
        return self._copySettingsToSys(this);
      }), o.s(function() {
        var command;

        if (/win/.test(platform)) {
          command = "start /WAIT \"\" \"" + self.currentVersion.path + "\" " + (options.args.join(" "));
        } else {
          command = "open \"" + self.currentVersion.path + "\" -W --args " + (options.args.join(" "));
        }
        utils.logger.log(command);
        self._process = exec(command);
        return self._process.on("exit", self._onExit);
      }));
    };

    /*
    */


    Application.prototype.findVersion = function(version, callback) {
      version = sift({
        number: version
      }, this.versions).shift();
      if (version) {
        return callback(null, version);
      }
      return callback(new comerr.NotFound("" + this.name + " version " + this.version + " doesn't exist"));
    };

    /*
    */


    Application.prototype.getVersions = function(callback) {
      return callback(null, this.versions.map(function(v) {
        return v.number;
      }));
    };

    /*
    */


    Application.prototype.killAll = cstep(function(callback) {
      return utils.killProcesses(this.processNames, callback);
    });

    /*
    */


    Application.prototype.stop = function(callback) {
      if (callback == null) {
        callback = (function() {});
      }
      if (!this._process) {
        return callback();
      }
      return this.killAll(callback);
    };

    /*
    */


    Application.prototype._copySettingsToSys = function(callback) {
      var _this = this;

      return this.cleanup(outcome.e(callback).s(function() {
        return async.forEach(_this.currentVersion.settings, (function(setting, next) {
          var o;

          o = outcome.e(next);
          utils.logger.log("cp " + setting.from + " -> " + setting.to);
          return dirmr([setting.from]).join(setting.to).complete(next);
        }), callback);
      }));
    };

    /*
    */


    Application.prototype._copySettingsFromSys = cstep(function(callback) {});

    /*
    */


    Application.prototype.cleanup = cstep(function(callback) {
      return async.forEach(this.currentVersion.settings, (function(setting, next) {
        if (!fs.existsSync(setting.to)) {
          return next();
        }
        utils.logger.log("rm -rf " + setting.to);
        return rmdir(setting.to, next);
      }), callback);
    });

    /*
    */


    Application.prototype._onExit = function() {
      utils.logger.log("" + this.name + "@" + this.currentVersion.number + " has exited, cleaning up...");
      this.running = false;
      return this.emit("stop");
    };

    return Application;

  })(events.EventEmitter);

  module.exports = Application;

}).call(this);
