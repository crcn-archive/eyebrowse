// Generated by CoffeeScript 1.6.2
(function() {
  var Browser, EventEmitter, Version, async, asyngleton, cstep, dirmr, exec, fiddle, fs, outcome, path, platform, rmdir, sift, utils, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require("underscore");

  path = require("path");

  cstep = require("cstep");

  utils = require("../../../utils");

  asyngleton = require("asyngleton");

  sift = require("sift");

  fiddle = require("fiddle");

  Version = require("./version");

  fs = require("fs");

  outcome = require("outcome");

  async = require("async");

  rmdir = require("rmdir");

  dirmr = require("dirmr");

  platform = require("os").platform;

  exec = require("child_process").exec;

  EventEmitter = require("events").EventEmitter;

  Browser = (function(_super) {
    __extends(Browser, _super);

    /*
    */


    function Browser(directory, config, versions) {
      this.directory = directory;
      this.config = config;
      this.versions = versions;
      this._onExit = __bind(this._onExit, this);
      this.name = path.basename(directory);
    }

    /*
    */


    Browser.prototype.test = function(options, callback) {
      var version;

      version = sift({
        number: options.version
      }, this.versions).shift();
      if (!version) {
        return callback(new Error("" + this.name + "@" + options.version + " does not exist"));
      }
      return callback(null, version);
    };

    /*
    */


    Browser.prototype.start = function(options, callback) {
      var _this = this;

      return this.killAll(function() {
        return _this.test(options, function(err, version) {
          _this.currentVersion = version;
          if (err != null) {
            return callback(err);
          }
          return _this._copySettingsToSys(function() {
            var command;

            if (/win/.test(platform)) {
              command = "start /WAIT \"\" \"" + version.path + "\" " + (options.args.join(" "));
            } else {
              command = "open \"" + version.path + "\" -W --args " + (options.args.join(" "));
            }
            utils.logger.log(command);
            _this._process = exec(command);
            return _this._process.on("exit", _this._onExit);
          });
        });
      });
    };

    /*
    */


    Browser.prototype.stop = function(callback) {
      if (callback == null) {
        callback = (function() {});
      }
      if (!this._process) {
        return callback();
      }
      return this.killAll(callback);
    };

    /*
    */


    Browser.prototype.cleanup = cstep(function(callback) {
      return async.forEach(this.currentVersion.settings, (function(setting, next) {
        if (!fs.existsSync(setting.to)) {
          return next();
        }
        utils.logger.log("rm -rf " + setting.to);
        return rmdir(setting.to, next);
      }), callback);
    });

    /*
    */


    Browser.prototype._copySettingsToSys = function(callback) {
      var _this = this;

      return this.cleanup(outcome.e(callback).s(function() {
        return async.forEach(_this.currentVersion.settings, (function(setting, next) {
          var o;

          o = outcome.e(next);
          utils.logger.log("cp " + setting.from + " -> " + setting.to);
          return dirmr([setting.from]).join(setting.to).complete(next);
        }), callback);
      }));
    };

    /*
    */


    Browser.prototype.killAll = cstep(function(callback) {
      return utils.killProcesses(this.config.process.names, callback);
    });

    /*
    */


    Browser.prototype._copySettingsToSys = function(callback) {
      var _this = this;

      return this.cleanup(outcome.e(callback).s(function() {
        return async.forEach(_this.currentVersion.settings, (function(setting, next) {
          var o;

          o = outcome.e(next);
          utils.logger.log("cp " + setting.from + " -> " + setting.to);
          return dirmr([setting.from]).join(setting.to).complete(next);
        }), callback);
      }));
    };

    /*
    */


    Browser.prototype._onExit = function() {
      utils.logger.log("" + this.name + "@" + this.currentVersion.number + " has exited, cleaning up...");
      this.running = false;
      return this.emit("stop");
    };

    return Browser;

  })(EventEmitter);

  module.exports = Browser;

}).call(this);
