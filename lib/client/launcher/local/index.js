// Generated by CoffeeScript 1.6.2
(function() {
  var Browser, Loader, LocalLauncher, async, asyngleton, cstep, fs, path, sift, utils,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require("fs");

  path = require("path");

  utils = require("../../../utils");

  cstep = require("cstep");

  async = require("async");

  Browser = require("./browser");

  sift = require("sift");

  Loader = require("./loader");

  asyngleton = require("asyngleton");

  LocalLauncher = (function(_super) {
    __extends(LocalLauncher, _super);

    /*
    */


    function LocalLauncher(path) {
      LocalLauncher.__super__.constructor.call(this);
      this.directory = utils.fixPath(path);
      this._loader = new Loader(this.directory);
      this._listenOnExit();
    }

    /*
    */


    LocalLauncher.prototype.test = function(options, callback) {
      var _this = this;

      return this.load(function() {
        var browser;

        browser = sift({
          name: options.name
        }, _this.browsers).pop();
        if (!browser) {
          return callback(new Error("browser " + options.name + " does not exist"));
        }
        return browser.test(options, function(err) {
          if (err != null) {
            return callback(err);
          }
          return callback(null, browser);
        });
      });
    };

    /*
    */


    LocalLauncher.prototype.start = function(options, callback) {
      var _this = this;

      return this.test(options, function(err, browser) {
        if (err != null) {
          return callback(err);
        }
        return browser.start(options, callback);
      });
    };

    /*
    */


    LocalLauncher.prototype.load = asyngleton(cstep(function(callback) {
      var _this = this;

      return this._loader.load(function(err, browsers) {
        _this.browsers = browsers;
        return callback(err);
      });
    }));

    /*
    */


    LocalLauncher.prototype.listBrowsers = function(callback) {
      var _this = this;

      return this.load(function() {
        return callback(null, _this.browsers);
      });
    };

    /*
    */


    LocalLauncher.prototype._listenOnExit = function() {
      var _this = this;

      return process.once("SIGINT", function() {
        var app, _i, _len, _ref;

        _ref = _this.browsers;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          app = _ref[_i];
          app.stop();
        }
        return process.exit();
      });
    };

    return LocalLauncher;

  })(require("../base"));

  module.exports = LocalLauncher;

}).call(this);
