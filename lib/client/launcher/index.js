// Generated by CoffeeScript 1.6.2
(function() {
  var BrowserLauncher, async, factory, flatten, outcome, toarray;

  async = require("async");

  flatten = require("flatten");

  factory = require("./factory");

  outcome = require("outcome");

  toarray = require("toarray");

  /*
  */


  BrowserLauncher = (function() {
    /*
    */
    function BrowserLauncher(config) {
      var cfg, name, transportPluginConfig, transportType, _ref;

      this._launchers = factory.getLaunchers(config.transports);
      if (config.plugin) {
        for (transportType in config.plugin) {
          transportPluginConfig = config.plugin[transportType];
          for (name in transportPluginConfig) {
            cfg = {};
            cfg[transportType] = (_ref = BrowserLauncher.plugins[name]) != null ? _ref.client(transportPluginConfig) : void 0;
            this.use(cfg);
          }
        }
      }
    }

    /*
    */


    BrowserLauncher.prototype.use = function(modules) {
      var launcher, m, mods, _i, _len, _ref, _results;

      _ref = this._launchers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        launcher = _ref[_i];
        if (typeof modules === "function") {
          _results.push(launcher.use(modules));
        } else if (modules[launcher.name]) {
          mods = toarray(modules[launcher.name]);
          _results.push((function() {
            var _j, _len1, _results1;

            _results1 = [];
            for (_j = 0, _len1 = mods.length; _j < _len1; _j++) {
              m = mods[_j];
              _results1.push(launcher.use(m));
            }
            return _results1;
          })());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    /*
    */


    BrowserLauncher.prototype.test = function(options, callback) {
      var ops;

      ops = this._fixOptions(options);
      return async.eachSeries(this._launchers, (function(launcher, next) {
        return launcher.test(ops, function(err) {
          if (err != null) {
            return next();
          }
          return callback(null, launcher);
        });
      }), function() {
        return callback(new Error("" + ops.name + "@" + ops.version + " does not exist"));
      });
    };

    /*
     starts a browser
    */


    BrowserLauncher.prototype.start = function(options, callback) {
      var ops;

      if (callback == null) {
        callback = (function() {});
      }
      ops = this._fixOptions(options);
      return this.test(ops, function(err, launcher) {
        if (err != null) {
          return callback(err);
        }
        return launcher.start(ops, function(err) {
          if (err == null) {
            return callback.apply(null, arguments);
          }
          return next();
        });
      });
    };

    /*
     lists available browsers
    */


    BrowserLauncher.prototype.listBrowsers = function(callback) {
      return async.map(this._launchers, (function(launcher, next) {
        var _this = this;

        return launcher.listBrowsers(outcome.e(next).s(function(browsers) {
          return next(null, browsers.map(function(browser) {
            browser.type = launcher.label || launcher.name;
            return browser;
          }));
        }));
      }), outcome.e(callback).s(function(result) {
        return callback(null, flatten(result));
      }));
    };

    /*
    */


    BrowserLauncher.prototype._fixOptions = function(options) {
      var nameParts;

      nameParts = options.name.split("@");
      return {
        name: nameParts.shift(),
        version: options.version || nameParts.shift() || "latest",
        args: options.args || []
      };
    };

    /*
    */


    BrowserLauncher.plugins = require("../plugins");

    return BrowserLauncher;

  })();

  module.exports = BrowserLauncher;

}).call(this);
