// Generated by CoffeeScript 1.6.2
(function() {
  var Client, Loader, async, comerr, cstep, outcome, sift, _;

  require("coffee-script");

  cstep = require("cstep");

  Loader = require("./loaders");

  sift = require("sift");

  outcome = require("outcome");

  comerr = require("comerr");

  async = require("async");

  _ = require("underscore");

  Client = (function() {
    /*
    */
    function Client(options) {
      this._loader = new Loader(options);
      this.load();
      this._listenOnExit();
    }

    /*
     Starts the application
    */


    Client.prototype.start = function(options, callback) {
      var ops;

      ops = this._parseOptions(options);
      return this.findApp(ops.name, outcome.e(callback).s(function(app) {
        return app.start({
          version: ops.version,
          args: options.args
        }, callback);
      }));
    };

    /*
    */


    Client.prototype.findApp = cstep(function(appName, callback) {
      var app;

      app = sift({
        name: appName
      }, this.applications).shift();
      if (app) {
        return callback(null, app);
      }
      return callback(new comerr.NotFound("application not found"));
    });

    /*
    */


    Client.prototype.getAvailableBrowsers = cstep(function(callback) {
      var browsers;

      browsers = [];
      return async.forEach(this.applications, (function(app, next) {
        return app.getVersions(outcome.e(next).s(function(versions) {
          browsers.push({
            name: app.name,
            versions: versions
          });
          return next();
        }));
      }), outcome.e(callback).s(function(v) {
        return callback(null, browsers);
      }));
    });

    /*
    */


    Client.prototype._parseOptions = function(options) {
      var nameParts;

      nameParts = options.name.split("@");
      return _.extend({}, options, {
        name: nameParts.shift(),
        version: nameParts.shift(),
        args: options.args || []
      });
    };

    /*
    */


    Client.prototype.load = cstep(function(callback) {
      var _this = this;

      return this._loader.loadApplications(outcome.e(callback).s(function(applications) {
        _this.applications = applications;
        return callback();
      }));
    });

    /*
    */


    Client.prototype._listenOnExit = function() {
      var _this = this;

      return process.on("SIGINT", function() {
        var app, _i, _len, _ref, _results;

        _ref = _this.applications;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          app = _ref[_i];
          _results.push(app.stop());
        }
        return _results;
      });
    };

    return Client;

  })();

  module.exports = Client;

}).call(this);
